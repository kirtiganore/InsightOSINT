import React, { useState } from "react";
import "./App.css";
import jsPDF from "jspdf";

function App() {
  const [query, setQuery] = useState("");
  const [response, setResponse] = useState(null);
  const [dashboard, setDashboard] = useState(null);
  const [error, setError] = useState(null);

  const handleSearch = async (e) => {
    e.preventDefault();
    setError(null);
    setResponse(null);
    setDashboard(null);

    try {
      const res = await fetch("http://127.0.0.1:5000/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query }),
      });

      if (!res.ok) {
        throw new Error("Failed to fetch data from the server.");
      }

      const data = await res.json();
      setResponse(data.response);
      setDashboard(data.dashboard);
    } catch (err) {
      setError(err.message);
    }
  };

  const exportAsPDF = () => {
    const pdf = new jsPDF("p", "mm", "a4");
    const margin = 15;
    const pageWidth = pdf.internal.pageSize.getWidth() - margin * 2;
    let y = margin;

    // Add Title
    pdf.setFontSize(18);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(33, 37, 41);
    pdf.text("InsightOSINT Analysis Report", pdf.internal.pageSize.getWidth() / 2, y, {
      align: "center",
    });
    y += 15;

    // Add Query
    if (query) {
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.setTextColor(99, 110, 114);
      pdf.text(`Query: ${query}`, margin, y);
      y += 10;
    }

    // Add Analysis Results
    if (response) {
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(52, 152, 219);
      pdf.text("Analysis Results", margin, y);
      y += 8;
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.setTextColor(0, 0, 0);
      const analysisLines = pdf.splitTextToSize(response, pageWidth);
      analysisLines.forEach((line) => {
        if (y + 10 > 280) {
          pdf.addPage();
          y = margin;
        }
        pdf.text(line, margin, y);
        y += 7;
      });
      y += 5;
    }

    // Add Dashboard Content
    if (dashboard) {
      // Trending Topics
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(52, 152, 219);
      pdf.text("Real-time Monitoring", margin, y);
      y += 8;
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Trending topics: ${dashboard.trending_topics.join(", ")}`, margin, y);
      y += 10;

      // Data Sources Overview
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(52, 152, 219);
      pdf.text("Data Sources Overview", margin, y);
      y += 8;
      pdf.setFontSize(12);
      Object.entries(dashboard.data_sources).forEach(([source, percentage]) => {
        if (y + 10 > 280) {
          pdf.addPage();
          y = margin;
        }
        pdf.text(`${source}: ${percentage}%`, margin, y);
        y += 7;
      });
      y += 5;

      // Geospatial Analysis
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(52, 152, 219);
      pdf.text("Geospatial Analysis", margin, y);
      y += 8;
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.text(`Top regions: ${dashboard.regions.join(", ")}`, margin, y);
      y += 10;

      // Sentiment Analysis
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(52, 152, 219);
      pdf.text("Sentiment Analysis", margin, y);
      y += 8;
      pdf.setFontSize(12);
      pdf.text(`Overall sentiment: ${dashboard.sentiment.overall}`, margin, y);
    }

    // Footer
    pdf.setFontSize(10);
    pdf.setFont("helvetica", "italic");
    pdf.setTextColor(128, 128, 128);
    pdf.text(
      `Generated by InsightOSINT on ${new Date().toLocaleString()}`,
      pdf.internal.pageSize.getWidth() / 2,
      pdf.internal.pageSize.getHeight() - 10,
      { align: "center" }
    );

    // Save the PDF
    pdf.save(`${query || "analysis"}.pdf`);
  };

  return (
    <div className="app-container">
      <Header />
      <main className="main-content">
        <SearchForm query={query} setQuery={setQuery} handleSearch={handleSearch} />
        {error && <ErrorMessage error={error} />}
        {response && <AnalysisResults response={response} />}
        {dashboard && <Dashboard dashboard={dashboard} />}
        {(response || dashboard) && (
          <button onClick={exportAsPDF} className="save-button">
            Download PDF Report
          </button>
        )}
      </main>
    </div>
  );
}

const Header = () => (
  <header className="header">
    <h1>InsightOSINT</h1>
    <p>Advanced AI-Powered OSINT Platform</p>
  </header>
);

const SearchForm = ({ query, setQuery, handleSearch }) => (
  <div className="search-container">
    <form onSubmit={handleSearch}>
      <input
        type="text"
        placeholder="Enter your query"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        className="search-input"
      />
      <button type="submit" className="search-button">
        Analyze with AI
      </button>
    </form>
  </div>
);

const ErrorMessage = ({ error }) => <p className="error">{error}</p>;

const AnalysisResults = ({ response }) => (
  <div className="results">
    <h3>Analysis Results</h3>
    <p>{response}</p>
  </div>
);

const Dashboard = ({ dashboard }) => (
  <div className="dashboard">
    <h3>Real-time Monitoring</h3>
    <p>Trending topics: {dashboard.trending_topics.join(", ")}</p>
    <h3>Data Sources Overview</h3>
    <ul>
      {Object.entries(dashboard.data_sources).map(([source, percentage]) => (
        <li key={source}>
          {source}: {percentage}%
        </li>
      ))}
    </ul>
    <h3>Geospatial Analysis</h3>
    <p>Top regions: {dashboard.regions.join(", ")}</p>
    <h3>Sentiment Analysis</h3>
    <p>Overall sentiment: {dashboard.sentiment.overall}</p>
  </div>
);

export default App;
